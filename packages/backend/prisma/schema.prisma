// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String   @id @default(ulid())
  createdAt DateTime @default(now())

  email        String @unique
  passwordHash String

  firstName       String
  lastName        String
  username        String
  isEmailVerified Boolean @default(false)

  img  String?
  role ROLE    @default(USER)

  tasks    Tasks[]    @relation("userTasks")
  watching Tasks[]    @relation("userWatching")
  comments Comments[] @relation("comment")

  projects        Projects_Users[]
  createdProjects Projects[]       @relation("projects")
  createdSprints  Sprints[]

  clients Clients[] @relation("client")
}

model Clients {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  createdBy Users    @relation("client", fields: [uid], references: [id])

  firstName   String
  lastName    String
  email       String @unique
  phoneNumber String
  company     String
  industry    String
  address     String @db.VarChar(5000)

  uid String

  projects Projects[] @relation("client")
}

model Projects {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  createdBy Users    @relation("projects", fields: [uid], references: [id])

  title       String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      String
  type        String
  documents   Json[]    @default([])

  uid  String // user that added that project
  cuid String // user that is the  client of that project

  client  Clients          @relation("client", fields: [cuid], references: [id])
  users   Projects_Users[]
  sprints Sprints[]
}

model Sprints {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  createdBy Users    @relation(fields: [uid], references: [id])

  title     String
  startDate DateTime
  endDate   DateTime
  goals     String   @db.VarChar(5000)
  started   Boolean  @default(false)
  note      String   @default("") @db.VarChar(300)
  pid       String
  uid       String

  tasks   Tasks[]
  project Projects @relation(fields: [pid], references: [id])
}

model Tasks {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  sid       String
  uid       String
  createdBy String

  startDate DateTime
  dueDate   DateTime

  status      String
  title       String
  description String @db.VarChar(5000)

  assignedTo Users @relation("userTasks", fields: [uid], references: [id])
  watcher    Users @relation("userWatching", fields: [createdBy], references: [id])

  sprint   Sprints    @relation(fields: [sid], references: [id])
  comments Comments[] @relation("comment")
}

model Comments {
  id        String   @id @default(ulid())
  createdAt DateTime @default(now())

  uid  String
  tid  String
  text String @db.VarChar(5000)

  user Users @relation("comment", fields: [uid], references: [id])
  task Tasks @relation("comment", fields: [tid], references: [id])
}

model Projects_Users {
  createdAt DateTime @default(now())

  uid String
  pid String

  user     Users    @relation(fields: [uid], references: [id])
  project  Projects @relation(fields: [pid], references: [id])
  userRole String

  @@id([uid, pid])
}

enum ROLE {
  ADMIN
  USER
  CLIENT
}
